{"ast":null,"code":"const validate = (form, setErrors, errors) => {\n  // recibe l form y se vija si el nomnbre esta bien si no es asi que guarde en un estado el error\n  // validando el mail\n  if (!form.email) setErrors({\n    ...errors,\n    username: \"email vacio\"\n  }); // aplicamos el set errors y lo pasmos por parametro por que esta afuera de la funcion general\n  else {\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(form.username)) setErrors({\n      ...errors,\n      username: \"\"\n    });else setErrors({\n      ...errors,\n      username: \"email invalido\"\n    });\n  }\n  if (!form.username) {\n    setErrors({\n      ...errors,\n      username: \"nombre de usuario vacio\"\n    });\n  } else if (form.username.length > 35) {\n    setErrors({\n      ...errors,\n      username: \"el nombre de usuario no puede tener más de 35 caracteres\"\n    });\n  } else {\n    setErrors({\n      ...errors,\n      username: \"\"\n    });\n  }\n};\nexport default validate;","map":{"version":3,"names":["validate","form","setErrors","errors","email","username","test","length"],"sources":["C:/Users/crist/OneDrive/Escritorio/M2 PT12A/RICK AND MORTY APP/rick_and_morty/src/components/Form/validation.js"],"sourcesContent":["const validate = (form, setErrors, errors) => {\r\n  // recibe l form y se vija si el nomnbre esta bien si no es asi que guarde en un estado el error\r\n  // validando el mail\r\n  if (!form.email)\r\n    setErrors({\r\n      ...errors,\r\n      username: \"email vacio\",\r\n    }); // aplicamos el set errors y lo pasmos por parametro por que esta afuera de la funcion general\r\n  else {\r\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(form.username))\r\n      setErrors({ ...errors, username: \"\" });\r\n    else setErrors({ ...errors, username: \"email invalido\" });\r\n  }\r\n\r\n  if (!form.username) {\r\n    setErrors({...errors, username: \"nombre de usuario vacio\"});\r\n  } else if (form.username.length > 35) {\r\n    setErrors({...errors, username: \"el nombre de usuario no puede tener más de 35 caracteres\"});\r\n  } else {\r\n    setErrors({...errors, username: \"\"});\r\n  }\r\n};\r\nexport default validate;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,MAAM,KAAK;EAC5C;EACA;EACA,IAAI,CAACF,IAAI,CAACG,KAAK,EACbF,SAAS,CAAC;IACR,GAAGC,MAAM;IACTE,QAAQ,EAAE;EACZ,CAAC,CAAC,CAAC,CAAC;EAAA,KACD;IACH,IAAI,6CAA6C,CAACC,IAAI,CAACL,IAAI,CAACI,QAAQ,CAAC,EACnEH,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEE,QAAQ,EAAE;IAAG,CAAC,CAAC,CAAC,KACpCH,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEE,QAAQ,EAAE;IAAiB,CAAC,CAAC;EAC3D;EAEA,IAAI,CAACJ,IAAI,CAACI,QAAQ,EAAE;IAClBH,SAAS,CAAC;MAAC,GAAGC,MAAM;MAAEE,QAAQ,EAAE;IAAyB,CAAC,CAAC;EAC7D,CAAC,MAAM,IAAIJ,IAAI,CAACI,QAAQ,CAACE,MAAM,GAAG,EAAE,EAAE;IACpCL,SAAS,CAAC;MAAC,GAAGC,MAAM;MAAEE,QAAQ,EAAE;IAA0D,CAAC,CAAC;EAC9F,CAAC,MAAM;IACLH,SAAS,CAAC;MAAC,GAAGC,MAAM;MAAEE,QAAQ,EAAE;IAAE,CAAC,CAAC;EACtC;AACF,CAAC;AACD,eAAeL,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}