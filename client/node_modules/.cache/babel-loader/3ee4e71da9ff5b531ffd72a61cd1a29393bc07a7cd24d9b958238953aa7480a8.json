{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\OneDrive\\\\Escritorio\\\\M2 PT12A\\\\RICK AND MORTY APP\\\\rick_and_morty\\\\src\\\\components\\\\Form\\\\form.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport style from './form.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validate = (form, setErrors, errors) => {\n  // recibe l form y se vija si el nomnbre esta bien si no es asi que guarde en un estado el error\n  // validando el mail\n  if (!form.email) setErrors({\n    ...errors,\n    email: \"email vacio\"\n  }); // aplicamos el set errors y lo pasmos por parametro por que esta afuera de la funcion general\n  else {\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(form.email)) setErrors({\n      ...errors,\n      email: \"\"\n    });else setErrors({\n      ...errors,\n      email: \"email invalido\"\n    });\n  }\n};\nconst Form = () => {\n  _s();\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [errors, setErrors] = useState({\n    // un estado para los errores\n    email: \"\",\n    password: \"\"\n  });\n  const handleChange = event => {\n    const property = event.target.name; // dejo en claro cual es la propiedad que quiero modificar\n    const value = event.target.value; // dejo en claro el valor que quiero darle\n\n    setForm({\n      ...form,\n      [property]: value\n    }); // aqui a traves del setForm agregamos a lo que tenia form el valor a la propiedad\n    validate({\n      ...form,\n      [property]: value\n    }, setErrors, errors); // validamos si el input del mail esta o no vacio\n  };\n\n  const submithandler = event => {\n    event.preventDefault(); // el preventDefault solo es para el event submit\n    alert(\"login existoso\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submithandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        value: form.email,\n        onChange: handleChange,\n        className: errors.email ? style.error : style.success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Paassword\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"password\",\n        value: form.password,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"0HfLZDXoMGNIf6HOONwO0wFG3/I=\");\n_c = Form;\nexport default Form;\n\n// cada imput debe tener un name y ese name hace referencia al dato que manejamos\n// label htmlFor debe tener el mismo nombre que name\n\n// queremos guardar os input en un estado usestate\n// en lugar de tener un estado para cada input realizamos un estado para el fomulario en  si\n// const [form, setForm] = useState({}) un solo estado que sea un objeto y que se modifique ahi\n// dentro de  <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} />\n// tenemos un value que es el valor que se le va a dar del objeto y un handleChange\n\n/* const handleChange = (event) =>{\r\n    if (event.target.name === 'username'){\r\n        setForm({...form, username: event.target.value})\r\n    }\r\naqui lo que hacemos es hace una funcion la cual recibe un evento y en la misma preguntamos si el evento\r\nque recibe es igual al name del input, de ser asi ejecuta el setForm y agrega a lo que habia en form el valor del evento\r\nesto lo hacemos si tenemos uno o dos valores en un objeto, pero si tenemos muchos tenemos que reordenar este codigo\r\nde la sigueinte forma\r\n\r\n    */\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","style","jsxDEV","_jsxDEV","validate","form","setErrors","errors","email","test","Form","_s","setForm","password","handleChange","event","property","target","name","value","submithandler","preventDefault","alert","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","className","error","success","_c","$RefreshReg$"],"sources":["C:/Users/crist/OneDrive/Escritorio/M2 PT12A/RICK AND MORTY APP/rick_and_morty/src/components/Form/form.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport style from './form.module.css'\r\n\r\nconst validate = (form, setErrors, errors) => {\r\n  // recibe l form y se vija si el nomnbre esta bien si no es asi que guarde en un estado el error\r\n  // validando el mail\r\n  if (!form.email)\r\n    setErrors({...errors, email: \"email vacio\",}); // aplicamos el set errors y lo pasmos por parametro por que esta afuera de la funcion general\r\n  else {if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(form.email))\r\n  setErrors({ ...errors, email: \"\" });\r\n    else setErrors({ ...errors, email: \"email invalido\" });\r\n  }\r\n  \r\n};\r\n\r\nconst Form = () => {\r\n  const [form, setForm] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    // un estado para los errores\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    const property = event.target.name; // dejo en claro cual es la propiedad que quiero modificar\r\n    const value = event.target.value; // dejo en claro el valor que quiero darle\r\n\r\n    setForm({ ...form, [property]: value }); // aqui a traves del setForm agregamos a lo que tenia form el valor a la propiedad\r\n    validate({ ...form, [property]: value }, setErrors, errors); // validamos si el input del mail esta o no vacio\r\n  };\r\n\r\n  const submithandler = (event) => {\r\n    event.preventDefault(); // el preventDefault solo es para el event submit\r\n    alert(\"login existoso\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submithandler}>\r\n      <div>\r\n        <label htmlFor=\"username\">email</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={form.email}\r\n          onChange={handleChange}\r\n          className={errors.email ? style.error : style.success}\r\n        />\r\n        <span>{errors.email}</span> {/* nos muesta el mensaje del estado de lo que vamos escribiendo */}\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"password\">Paassword</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"password\"\r\n          value={form.password}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n\r\n// cada imput debe tener un name y ese name hace referencia al dato que manejamos\r\n// label htmlFor debe tener el mismo nombre que name\r\n\r\n// queremos guardar os input en un estado usestate\r\n// en lugar de tener un estado para cada input realizamos un estado para el fomulario en  si\r\n// const [form, setForm] = useState({}) un solo estado que sea un objeto y que se modifique ahi\r\n// dentro de  <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} />\r\n// tenemos un value que es el valor que se le va a dar del objeto y un handleChange\r\n\r\n/* const handleChange = (event) =>{\r\n    if (event.target.name === 'username'){\r\n        setForm({...form, username: event.target.value})\r\n    }\r\naqui lo que hacemos es hace una funcion la cual recibe un evento y en la misma preguntamos si el evento\r\nque recibe es igual al name del input, de ser asi ejecuta el setForm y agrega a lo que habia en form el valor del evento\r\nesto lo hacemos si tenemos uno o dos valores en un objeto, pero si tenemos muchos tenemos que reordenar este codigo\r\nde la sigueinte forma\r\n\r\n    */\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}